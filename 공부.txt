# 1일차
[vsstudio에 가상환경 설치하고 만들기(window 환경)]
1. 가상환경 설치
강사님은 바로 vsstudio 터미널에 서가상환경 설치한 후 activate 하셨지만 내컴은 보안문제로 오류뜸.
cmd창을 관리자 권한으로 열어서 fcdjango_venv\Scripts\activate 하니까 됨.

2. Django 설치
cmd창) pip install django
-> django-admin이라는 명령어 사용가능하게 됨

3. 프로젝트 설치
cmd창) django-admin startproject fc_community
-> fc_community라는 폴더 생성

4. 앱 설치
cmd창) cd fc_community
-> fc_community로 들어간다
cmd창) django-admin startapp board
-> board라는 앱폴더 생성

* project vs app
project : 하나의 프로그램이라 보면 됨
app : 묶음단위로 나타낼 수 있는 것(사용자 이름 생성/제거 등을 하는 것...?)

5. templates 폴더 생성
vsstudio에서 board 폴더 안에 templates 폴더 생성(mtv 생성 완료)

===========================================================================================================================
# 2일차
[새로운 앱 만들기(fcuser)]
## fcdjango_venv 활성화
(cmd창) fcdjango_venv\Scripts\activate

## fc_community 프로젝트로 들어가기
(cmd창) cd fc_community

## 새로운 앱 만들기
(cmd창) django-admin startapp fcuser

## 템플릿 생성 후 settings에서 fcuser 넣어줘야 함.

**************************************************************************************************************************
[새로운 모델 만들기(로그인 페이지 만들기)]
1. fcuser 앱의 templates에서 models.py를 연다.
2. 다음과 같이 코딩한다.
## 클래스 만듦(models 모듈에서 Model을 불러와야 함)
class Fcuser(models.Model):
    #사용자명 칸을 만든다. 최대 길이는 64이고, 실제 로그인페이지에서 우리가 볼 수 있는 이름은 '사용자명'이다.
    username = models.CharField(max_length=64,
                                verbose_name='사용자명')
                                
    #비밀번호 칸을 만든다. 최대 길이는 64이고, 실제 로그인페이지에서 우리가 볼 수 있는 이름은 '비밀번호'이다.
    password = models.CharField(max_length=64,
                                verbose_name='비밀번호')
                                
    #등록시간 칸을 만든다. 최대 길이는 64이고, 실제 로그인페이지에서 우리가 볼 수 있는 이름은 '등록시'이다.
    registered_dttm = models.DateTimeField(auto_now_add=True,
                                        verbose_name='등록시간')

    class Meta:
        # 앱들과 테이블명 구분하기 위해서
        db_table = 'Fastcampus_fcuser'


3. 이렇게 만든 것은 makemigrations를 입력하면 우리가 만든 테이블을 볼 수 있다.
(cmd창) python manage.py makemigrations
이렇게 하면 다음과 같이 뜬다.

              Migrations for 'fcuser':
                fcuser\migrations\0001_initial.py
                  - Create model Fcuser
                  
**** fcuser\migrations\0001_initial.py 파일에 들어가면 다음과 같이 자동으로 만들어져서 나온다 ****

            # Generated by Django 3.2 on 2021-04-13 01:38

            from django.db import migrations, models


            class Migration(migrations.Migration):

                initial = True

                dependencies = [
                ]

                operations = [
                    migrations.CreateModel(
                        name='Fcuser',
                        fields=[
                            ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                            ('username', models.CharField(max_length=64, verbose_name='사용자명')),
                            ('password', models.CharField(max_length=64, verbose_name='비밀번호')),
                            ('registered_dttm', models.DateTimeField(auto_now_add=True, verbose_name='등록시간')),
                        ],
                        options={
                            'db_table': 'Fastcampus_fcuser',
                        },
                    ),
                ]


4. 필요한 다른 것들도 migrate 시킨다.
(cmd창) python manage.py migrate

**** 실행시키면 이렇게 나옴 ****

          Operations to perform:
            Apply all migrations: admin, auth, contenttypes, fcuser, sessions
          Running migrations:
            Applying contenttypes.0001_initial... OK
            Applying auth.0001_initial... OK
            Applying admin.0001_initial... OK
            Applying admin.0002_logentry_remove_auto_add... OK
            Applying admin.0003_logentry_add_action_flag_choices... OK
            Applying contenttypes.0002_remove_content_type_name... OK
            Applying auth.0002_alter_permission_name_max_length... OK
            Applying auth.0003_alter_user_email_max_length... OK
            Applying auth.0004_alter_user_username_opts... OK
            Applying auth.0005_alter_user_last_login_null... OK
            Applying auth.0006_require_contenttypes_0002... OK
            Applying auth.0007_alter_validators_add_error_messages... OK
            Applying auth.0008_alter_user_username_max_length... OK
            Applying auth.0009_alter_user_last_name_max_length... OK
            Applying auth.0010_alter_group_name_max_length... OK
            Applying auth.0011_update_proxy_permissions... OK
            Applying auth.0012_alter_user_first_name_max_length... OK
            Applying fcuser.0001_initial... OK
            Applying sessions.0001_initial... OK


5. 이제 만들어진 db를 한 번 살펴보자.
(cmd창) sqlite3 db.sqlite3
입력 후 아래 코드를 입력한다.
(cmd창) .tables

**** 위의 코드를 실행시키면 아래와 같이 나옴(테이블들이 나옴) ****

    Fastcampus_fcuser           auth_user_user_permissions
    auth_group                  django_admin_log
    auth_group_permissions      django_content_type
    auth_permission             django_migrations
    auth_user                   django_session
    auth_user_groups


6. 방금 만든 'Fastcampus_fcuser'의 스키마를 확인하려면 아래의 코드 입력(소문자 대문자를 구분하지 않는듯)
(cmd창) .schema fastcampus_fcuser

**** 위의 코드를 실행시키면 아래와 같이 나옴(아이디는 자동생성) ****

      CREATE TABLE IF NOT EXISTS "Fastcampus_fcuser" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, 
      "username" varchar(64) NOT NULL, "password" varchar(64) NOT NULL, "registered_dttm" datetime NOT NULL);


7. 변경사항을 입력한다면 위의 3, 4번을 반복하면 자동 업데이트가 되면서 
** fcuser\migrations\0001_initial.py ** 에서 0001 -> 0002 이런식으로 새로 생성하게 된다.

*************************************************************************************************************************
[Django admin에 들어가기]
1. 다음 코드를 입력
(cmd창) python manage.py runserver 

**** 이렇게 뜸 ****

            Watching for file changes with StatReloader
            Performing system checks...

            System check identified no issues (0 silenced).
            April 13, 2021 - 11:16:16
            Django version 3.2, using settings 'fc_community.settings'
            Starting development server at http://127.0.0.1:8000/
            Quit the server with CTRL-BREAK.
            
위의 코드에서 http://127.0.0.1:8000/ 을 복사한 후에 뒤에 admin을 붙여준다. 즉,
** http://127.0.0.1:8000/admin ** 을 주소창에 입력한다.

2. superuser 입력하기
(cmd창) python manage.py createsuperuser
입력 후에 아이디, 이메일, 비밀번호 입력하기(비밀번호는 창에서 안보이게 검은색으로 뜨므로 당황하지 말자)

***************************************************************************************************************************
[Django admin 페이지에 내가 만든 테이블 추가하기]
1. admin.py를 연다.
2. 다음과 같이 입력한다.

        # fcuser를 models에서 임포트 한다.
        from .models import Fcuser
        
        # 빈 클래스를 하나 만든다.
        class FcuserAdmin(admin.ModelAdmin):
            pass
        
        # Fcuser라는 테이블을 django에 추가한다.
        admin.site.register(Fcuser, FcuserAdmin)

<<< Django admin을 사용할 때 장점 >>>
SQL로 작성하기 힘든데 이 페이지에 들어가서 편리하게 추가, 삭제, 변경가능하다.

***************************************************************************************************************************
[Django admin 페이지 커스터마이징하기]











